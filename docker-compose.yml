services:
  # Serviço Cliente
  cliente-app:
    build:
      context: ./micro-cliente-clean-arch  # Ajuste para o caminho do seu projeto cliente
      dockerfile: Dockerfile
    container_name: cliente-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://admin:admin123@mongo-cliente:27017/db_cliente?authSource=admin
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      mongo-cliente:
        condition: service_healthy
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongo-cliente:
    image: mongo:7.0
    container_name: mongo-cliente
    ports:
      - "27017:27017"
    volumes:
      - mongodb_cliente_data:/data/db
      - ./cliente-service/mongo-init:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=db_cliente
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 30s
      retries: 5
    networks:
      - microservices-net
    restart: unless-stopped
  # Serviço Pedido
  pedido-app:
    build:
      context: ./micro-pedido-clean-arch  # Ajuste para o caminho do seu projeto pedido
      dockerfile: Dockerfile
    container_name: pedido-app
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://admin:admin123@mongodb-pedido:27017/db_pedido?authSource=admin
      - SPRING_PROFILES_ACTIVE=prod
      - CLIENTE_SERVICE_URL=http://cliente-app:8080
      - PAGAMENTO_SERVICE_URL=http://pagamento-app:8082
      - PAGAMENTO_PRODUTO_URL=http://produto-app:8083
      - PAGAMENTO_ESTOQUE_URL=http://estoque-app:8084
    depends_on:
      mongodb-pedido:
        condition: service_healthy
      rabbitmq: # Adicionado: Pedido-app agora espera pelo RabbitMQ
        condition: service_healthy
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb-pedido:
    image: mongo:7.0
    container_name: mongodb-pedido
    ports:
      - "27018:27017"
    volumes:
      - mongodb_pedido_data:/data/db
      - ./pedido-service/mongo-init:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=db_pedido
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 30s
      retries: 5
    networks:
      - microservices-net
    restart: unless-stopped

  # Serviço Pagamento
  pagamento-app:
    build:
      context: ./micro-pagamento-clean-arch  # Ajuste para o caminho do seu projeto pedido
      dockerfile: Dockerfile
    container_name: pagamento-app
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://admin:admin123@mongodb-pagamento:27017/db_pagamento?authSource=admin
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      mongodb-pagamento:
        condition: service_healthy
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb-pagamento:
    image: mongo:7.0
    container_name: mongodb-pagamento
    ports:
      - "27019:27017"
    volumes:
      - mongodb_pagamento_data:/data/db
      - ./pagamento-service/mongo-init:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=db_pagamento
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 30s
      retries: 5
    networks:
      - microservices-net
    restart: unless-stopped

  # Serviço Estoque
  estoque-app:
    build:
      context: ./micro-estoque-clean-arch  # Ajuste para o caminho do seu projeto pedido
      dockerfile: Dockerfile
    container_name: estoque-app
    ports:
      - "8084:8084"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://admin:admin123@mongodb-estoque:27017/db_estoque?authSource=admin
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      mongodb-estoque:
        condition: service_healthy
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb-estoque:
    image: mongo:7.0
    container_name: mongodb-estoque
    ports:
      - "27020:27017"
    volumes:
      - mongodb_estoque_data:/data/db
      - ./estoque-service/mongo-init:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=db_estoque
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 30s
      retries: 5
    networks:
      - microservices-net
    restart: unless-stopped

  # Serviço Produto
  produto-app:
    build:
      context: ./micro-produto-clean-arch  # Ajuste para o caminho do seu microserviço
      dockerfile: Dockerfile
    container_name: produto-app
    ports:
      - "8083:8083"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://admin:admin123@mongodb-produto:27017/db_produto?authSource=admin
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      mongodb-produto:
        condition: service_healthy
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb-produto:
    image: mongo:7.0
    container_name: mongodb-produto
    ports:
      - "27016:27017"
    volumes:
      - mongodb_produto_data:/data/db
      - ./produto-service/mongo-init:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=db_produto
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 30s
      retries: 5
    networks:
      - microservices-net
    restart: unless-stopped

  receiver-app:
    build:
      context: ./micro-receiver-clean-arch
      dockerfile: Dockerfile
    container_name: receiver-app
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - CLIENTE_SERVICE_URL=http://localhost:8085 # Alterado de localhost:8085
      - SERVER_PORT=8085
    depends_on:
      rabbitmq: # Adicionado a condição de serviço saudável
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ] # Corrigido para apontar para a porta do receiver-app
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-net

  rabbitmq:
    image: rabbitmq:4.1.0-management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck: # ADICIONADO HEALTHCHECK AO RABBITMQ
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge
    name: microservices-net
volumes:
  rabbitmq_data:
  mongodb_cliente_data:
  mongodb_pedido_data:
  mongodb_pagamento_data:
  mongodb_estoque_data:
  mongodb_produto_data: